{"version":3,"sources":["context/ModalContext/ModalContext.js","components/Modal/Modal.jsx","context/ModalContext/ModalContextProvider.js","event-utils.js","components/FullCalendar/FullCalendarComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ModalContext","createContext","openModal","closeModal","Modal","props","useState","eventTitle","setEventTitle","useContext","selectInfo","data","className","type","placeholder","value","onChange","e","target","startStr","onClick","ModalProvider","children","modalOpened","setModalOpened","modalConf","setModalConf","valueModalProvider","modalConfig","console","log","Provider","eventGuid","todayStr","Date","toISOString","replace","INITIAL_EVENTS","id","createEventId","title","start","String","FullCalendarComponent","eventData","setEventData","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","initialEvents","select","eventClick","clickInfo","event","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEaA,G,YAAeC,wBACxB,CACIC,UAAW,aACXC,WAAY,gB,sBCCPC,EAAQ,SAACC,GAClB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACQL,EAAeM,qBAAWT,GAA1BG,WAEFO,EAAaL,EAAMM,KAUzB,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKA,UAAU,QAAf,eACA,sBAAKA,UAAU,aAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,cAAcE,YAAY,aAAaC,MAAOR,EAAYS,SAZ9E,SAACC,GAClBT,EAAcS,EAAEC,OAAOH,UAYf,uBAAOH,UAAU,cAAcE,YAAY,YAAYC,MAAOL,EAAWS,WACzE,uBAAOP,UAAU,cAAcE,YAAY,eAC3C,uBAAOF,UAAU,cAAcE,YAAY,aAE/C,sBAAKF,UAAU,eAAf,UACI,wBAAQA,UAAU,eAAeQ,QAASjB,EAA1C,oBACA,wBAAQS,UAAU,eAAeQ,QAf3B,aAeN,yBC3BHC,EAAgB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC3B,EAAsChB,oBAAS,GAA/C,mBAAOiB,EAAP,KAAoBC,EAApB,KACA,EAAkClB,mBAAS,IAA3C,mBAAOmB,EAAP,KAAkBC,EAAlB,KAaMC,EAAqB,CACvBzB,UAZc,SAAC0B,GACfC,QAAQC,IAAI,cAAeF,GAC3BJ,GAAe,GACfE,EAAaE,IAUbzB,WAPe,WACfqB,GAAe,KASnB,OACI,eAACxB,EAAa+B,SAAd,CAAuBhB,MAASY,EAAhC,UACKJ,GAAe,cAAC,EAAD,CAAOZ,KAAMc,IAC5BH,M,4BC1BTU,EAAY,EACZC,GAAW,IAAIC,MAAOC,cAAcC,QAAQ,OAAQ,IAE3CC,EAAiB,CAC5B,CACEC,GAAIC,IACJC,MAAO,gBACPC,MAAOR,GAET,CACEK,GAAIC,IACJC,MAAO,cACPC,MAAOR,EAAW,cAIf,SAASM,IACd,OAAOG,OAAOV,K,UCLHW,EAAwB,WACjC,IAAQzC,EAAcO,qBAAWT,GAAzBE,UAER,EAAkCI,mBAAS,IAA3C,mBAAOsC,EAAP,KAAkBC,EAAlB,KAAgDhB,QAAQC,IAAI,YAAac,GAczE,OACI,qBAAKhC,UAAU,WAAf,SACI,qBAAKA,UAAU,gBAAf,SACI,cAAC,IAAD,CACIG,MAAS6B,EACTE,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,cAAe,CACfC,KAAM,kBACNC,OAAQ,QACRC,MAAO,yCAEPC,YAAY,eACZC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,cAAetB,EACfuB,OA7BS,SAAClD,GACtBmC,EAAanC,GAAamB,QAAQC,IAAI,gBAAiBpB,GACvDR,EAAUQ,IA6BEmD,WAzBS,SAACC,GAEpBA,EAAUC,MAAMC,iBCTXC,MAVf,WACE,OACE,cAAC,EAAD,UACE,qBAAKrD,UAAU,eAAf,SACE,cAAC,EAAD,SCCOsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.011dc5b3.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const ModalContext = createContext(\r\n    {\r\n        openModal: () => {},\r\n        closeModal: () => {},\r\n    }\r\n)","import React, { useState, useEffect, useContext } from 'react';\r\nimport './style.css';\r\n\r\nimport { ModalContext } from '../../context';\r\n\r\n\r\nexport const Modal = (props) => {\r\n    const [eventTitle, setEventTitle] = useState('');\r\n    const { closeModal } = useContext(ModalContext);\r\n\r\n    const selectInfo = props.data;     //console.log('props.data::', selectInfo);\r\n\r\n    const doEvendTitle = (e) => {\r\n        setEventTitle(e.target.value);\r\n    };\r\n\r\n    const saveEvent = () => {\r\n\r\n      }\r\n    \r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"cross\" >X</div>\r\n            <div className=\"modal-body\">\r\n                <input type='text' className='modal-input' placeholder='event name' value={eventTitle} onChange={doEvendTitle}></input>\r\n                <input className='modal-input' placeholder='event day' value={selectInfo.startStr}></input>\r\n                <input className='modal-input' placeholder='event time'></input>\r\n                <input className='modal-input' placeholder='notes'></input>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className='modal-button' onClick={closeModal}>Cancel</button>\r\n                <button className='modal-button' onClick={saveEvent}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { ModalContext } from './ModalContext';\r\nimport { Modal } from '../../components/Modal';\r\n\r\nexport const ModalProvider = ({children}) => {\r\n    const [modalOpened, setModalOpened] = useState(false);\r\n    const [modalConf, setModalConf] = useState('');\r\n\r\n    const openModal = (modalConfig) => {\r\n        console.log('modalConfig', modalConfig);\r\n        setModalOpened(true);\r\n        setModalConf(modalConfig);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalOpened(false);\r\n\r\n    };\r\n\r\n    const valueModalProvider = {\r\n        openModal: openModal,\r\n        closeModal: closeModal,\r\n    }\r\n\r\n    return (\r\n        <ModalContext.Provider value = {valueModalProvider}>\r\n            {modalOpened && <Modal data={modalConf}/>}\r\n            {children}\r\n        </ModalContext.Provider>\r\n    )\r\n}","\r\nlet eventGuid = 0\r\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\r\n\r\nexport const INITIAL_EVENTS = [\r\n  {\r\n    id: createEventId(),\r\n    title: 'All-day event',\r\n    start: todayStr\r\n  },\r\n  {\r\n    id: createEventId(),\r\n    title: 'Timed event',\r\n    start: todayStr + 'T12:00:00'\r\n  }\r\n]\r\n\r\nexport function createEventId() {\r\n  return String(eventGuid++)\r\n}","import React, { useState, useContext } from 'react';\r\n\r\n// FullCalendar's imports\r\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { INITIAL_EVENTS, createEventId } from '../../event-utils';\r\n\r\n\r\nimport { ModalContext } from '../../context';\r\nimport './style.css';\r\n\r\nexport const FullCalendarComponent = () => {\r\n    const { openModal } = useContext(ModalContext);\r\n\r\n    const [eventData, setEventData] = useState([]); console.log('eventData', eventData)\r\n\r\n    const clickModalButton = (selectInfo) => {\r\n        setEventData(selectInfo); console.log('selectInfo::1', selectInfo)\r\n        openModal(selectInfo); \r\n\r\n    };\r\n\r\n    const handleEventClick = (clickInfo) => {\r\n        // if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n          clickInfo.event.remove()\r\n        // }\r\n    };\r\n\r\n    return (\r\n        <div className='demo-app'>\r\n            <div className='demo-app-main'>\r\n                <FullCalendar\r\n                    value = {eventData}\r\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                    headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                    }}\r\n                    initialView='dayGridMonth'\r\n                    editable={true}\r\n                    selectable={true}\r\n                    selectMirror={true}\r\n                    dayMaxEvents={true}\r\n                    initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n                    select={clickModalButton}\r\n                    // eventContent={renderEventContent} // custom render function\r\n                    eventClick={handleEventClick}\r\n                    // eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n                    /* you can update a remote database when these fire:\r\n                    eventAdd={function(){}}\r\n                    eventChange={function(){}}\r\n                    eventRemove={function(){}}\r\n                    */\r\n                />\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react';\n\nimport './App.css';\n\nimport {ModalProvider} from './context';\nimport { FullCalendarComponent } from './components';\n\nfunction App() {\n  return (\n    <ModalProvider>\n      <div className='fullCalendar'>\n        <FullCalendarComponent />\n      </div>\n    </ModalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}